services:
  db:
    image: ${DB_IMAGE}
    container_name: ${APP_NAME}-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS}
    volumes:
      - mongo-data:/data/db
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - db_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5

  www:
    build:
      context: .
      dockerfile: prod.Dockerfile
    restart: always
    environment:
      NEXT_PUBLIC_BACKEND_URL: https://${WWW_DOMAIN}
    volumes:
      - .:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.www.rule=Host(`${WWW_DOMAIN}`)"
      - "traefik.http.routers.www.entrypoints=websecure"
      - "traefik.http.routers.www.tls=true"
      - "traefik.http.routers.www.tls.certresolver=resolver"
      - "traefik.http.services.www.loadbalancer.server.port=3000"
    networks:
      - db_network
      - proxy_network
    depends_on:
      db:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--certificatesresolvers.resolver.acme.tlschallenge=true"
      - "--certificatesresolvers.resolver.acme.email=${APP_EMAIL}"
      - "--certificatesresolvers.resolver.acme.storage=/letsencrypt/acme.json"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=resolver"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Basic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      # HTTP -> HTTPS redirect for all hosts
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:8082/ping","--spider" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - "80:80"
      - "443:443"
    networks:
      - proxy_network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - letsencrypt-data:/letsencrypt
    restart: unless-stopped

volumes:
  mongo-data:
  letsencrypt-data:

networks:
  db_network:
  proxy_network:
