generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

/// The user of the system
model User {
  id           Int            @id @default(autoincrement())
  userId       String         @unique @default(uuid())
  profile      UserProfile?
  messages     Message[]
  accessToken  AccessToken[]
  refreshToken RefreshToken[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@index([deletedAt])
}

/// User Information
model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  username  String   @unique @db.VarChar(32)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username])
}

/// The token for authorization
model AccessToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  deletedAt DateTime?

  @@index([userId])
  @@index([token])
  @@index([deletedAt])
}

/// The update token for authorization
model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  deletedAt DateTime?

  @@index([userId])
  @@index([token])
  @@index([deletedAt])
}

/// User's Message
model Message {
  id        Int       @id @default(autoincrement())
  body      String    @db.VarChar(1024)
  userId    String
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([createdAt])
  @@index([deletedAt])
}
